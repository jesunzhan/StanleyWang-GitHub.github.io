<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown语法范例]]></title>
    <url>%2F2019%2F02%2F18%2FMarkdown%E8%AF%AD%E6%B3%95%E8%8C%83%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[欢迎加入王导的VIP学习qq群：==&gt;932194668&lt;== 分级标题效果代码一级标题二级标题三级标题四级标题五级标题六级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 字体样式效果代码斜体粗体加粗斜体删除线1234*斜体***粗体*****加粗斜体***~~删除线~~ 颜色、字号效果代码颜色字号12&lt;font color=&quot;FF7F50&quot;&gt;颜色&lt;/font&gt;&lt;font size=&quot;20&quot;&gt;字号&lt;/font&gt; 列表有序列表有序列表则使用数字接着一个英文句点。效果代码 有序列表项 一 有序列表项 二 有序列表项 三 1231. 有序列表项 一2. 有序列表项 二3. 有序列表项 三在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：11986. What a great season. 会显示成： What a great season. 前面的1986成了序号，换句话说，也就是在行首出现了数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：11986\. What a great season. 则会正确的显示为： 1986. What a great season. 无序列表使用 *，+，-表示无序列表。效果代码 无序列表项 一 无序列表项 二 无序列表项 三 123- 无序列表项 一- 无序列表项 二- 无序列表项 三 定义型列表定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法“:”紧跟一个缩进(Tab)效果代码Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）1234Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 引用一般引用引用需要在被引用的文本前加上&gt;符号。效果代码 这是一个有两段文字的引用无意义的占行文字1.无意义的占行文字2. 无意义的占行文字3.无意义的占行文字4. 引用123456&gt; 这是一个有两段文字的引用&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt;&gt; 无意义的占行文字3.&gt; 无意义的占行文字4. 引用嵌套区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：效果代码 请问 Markdwon 怎么用？ - 小白 自己看教程！ - 愤青 教程在哪？ - 小白 123&gt; 请问 Markdwon 怎么用？ - 小白&gt;&gt; 自己看教程！ - 愤青&gt;&gt;&gt; 教程在哪？ - 小白 引用其它要素引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：效果代码 这是第一行列表项。 这是第二行列表项。 引用代码行：return shell_exec(&quot;echo $input | $markdown_script&quot;);引用代码段： 123for (list in $lists);do echo $list;done 1234567891011&gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt;&gt; 引用代码行：&gt; return shell_exec(&amp;quot;echo $input | $markdown_script&amp;quot;);&gt; 引用代码段：&gt;&#123;\% code %&#125;for (list in $lists);do echo $list;done&#123;\% endcode %&#125; note标签引用defaultprimaryinfosuccesswarningdanger default with-icondefault 1.1default 1.2 defalt no-icondefault 1.1default 1.2 primary with-iconprimary 1.1primary 1.2 primary no-iconprimary 1.1primary 1.2 info with-iconinfo 1.1info 1.2 info no-iconinfo 1.1info 1.2 success with-iconsuccess 1.1success 1.2 success no-iconsuccess 1.1success 1.2 warning with-iconwarning 1.1warning 1.2 warning no-iconwarning 1.1warning 1.2 danger with-icondanger 1.1danger 1.2 danger no-icondanger 1.1danger 1.2 居中引用效果：Something 代码：1&#123;% cq %&#125;Something&#123;% endcq %&#125; 表格第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐，在“-”右边加上“:”就右对齐，在“-”两边都加上“:”就居中对齐。效果：左对齐代码：左对齐效果：右对齐代码：右对齐效果：居中代码：居中 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 成绩表12345学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 成绩表12345学号|姓名|分数-:|-:|-:小明|男|75小红|女|79小陆|男|92 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 成绩表12345学号|姓名|分数:-:|:-:|:-:小明|男|75小红|女|79小陆|男|92 分割线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：效果代码 12345* * *****- - ------------------------------------- 代码行内代码效果代码C语言里的函数 scanf() 怎么使用？C语言里的函数 scanf() 怎么使用？C语言里的函数 scanf() 怎么使用？C语言里的函数 scanf() 怎么使用？C语言里的函数 scanf() 怎么使用？C语言里的函数 scanf() 怎么使用？C语言里的函数 scanf() 怎么使用？1234567C语言里的函数 `scanf()` 怎么使用？C语言里的函数 &#123;\% label default@scanf() %&#125; 怎么使用？C语言里的函数 &#123;\% label primary@scanf() %&#125; 怎么使用？C语言里的函数 &#123;\% label info@scanf() %&#125; 怎么使用？C语言里的函数 &#123;\% label success@scanf() %&#125; 怎么使用？C语言里的函数 &#123;\% label warning@scanf() %&#125; 怎么使用？C语言里的函数 &#123;\% label danger@scanf() %&#125; 怎么使用？ 多行代码效果代码123for (list in $lists);do echo $listdone12345```for (list in $lists);do echo $listdone``` 超链接行内式超链接效果代码不带title：欢迎来到我的博客带title：欢迎来到我的博客1234不带title：欢迎来到[我的博客](https://blog.stanley.wang\)带title：欢迎来到[我的博客](https://blog.stanley.wang &quot;Stanley&apos;s Blog&quot;) 自动超链接效果代码https://blog.stanley.wang &#115;&#116;&#x61;&#110;&#108;&#x65;&#121;&#46;&#119;&#x61;&#x6e;&#103;&#46;&#109;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#109;12\&lt;https://blog.stanley.wang\&gt;\&lt;stanley.wang.m@qq.com\&gt; 锚点超链接暂不支持锚点超链接 公式示例效果代码When $a \ne 0$, there are two solutions to $ax^2$ + bx + c = 0 and they are： $$x= {-b \pm \sqrt{b^2-4ac} \over 2a}$$1When $a \ne 0$, there are two solutions to $ax^2$ + bx + c = 0 and they are： $$x= &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;$$ 语法规范呈现位置 行内公式: 使用$…$定义，此时公式在一行内显示效果代码$\displaystyle\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$1$\displaystyle\sum_&#123;i=0&#125;^N\int_&#123;a&#125;^&#123;b&#125;g(t,i)\text&#123;d&#125;t$ 文内公式: 使用$$…$$定义，此时公式居中放大显示效果代码$$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$1$$\sum_&#123;i=0&#125;^N\int_&#123;a&#125;^&#123;b&#125;g(t,i)\text&#123;d&#125;t$$ 字母、运算符与杂项希腊字母 显示 命令 显示 命令 $\alpha$ \alpha $\beta$ \beta $\gamma$ \gamma $\delta$ \delta $\epsilon$ \epsilon $\zeta$ \zeta $\eta$ \eta $\theta$ \theta $\iota$ \iota $\kappa$ \kappa $\lambda$ \lambda $\mu$ \mu $\nu$ \nu $\xi$ \xi $\pi$ \pi $\rho$ \rho $\sigma$ \sigma $\tau$ \tau $\upsilon$ \upsilon $\phi$ \phi $\chi$ \chi $\psi$ \psi $\omega$ \omega — — 如果要大写希腊字母，则首字母大写即可，如$\Gamma$显示为$\Gamma$ 如果要使希腊字母显示为斜体，则前面添加var即可，如$\varGamma$显示为$\varGamma$ 字母修饰上下标 上标：^ 下标：_ 举例：$C_n^2$显示为：$C_n^2$ 矢量 单字母向量: $\vec a$显示为$\vec a$$\overrightarrow a$显示为$\overrightarrow a$ 多字母向量: $\vec {ab}$显示为$\vec {ab}$$\overrightarrow {ab}$显示为$\overrightarrow {ab}$ 特殊修饰: 上尖号:$\hat a$显示为$\hat a$上划线:$\overline a$显示为$\overline a$下划线:$\underline a$显示为$\underline a$ 字体 TypeWriter:$\mathtt {A}$显示为:$\mathtt {ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ Blackboard blod:$\mathbb {A}$显示为:$\mathbb {ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ Sans Serif:$\mathsf {A}$显示为:$\mathsf {ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ 空格 语法本身忽略空格，$ab$和$a b$都显示为$ab$ $a b$ 小空格:$a\ b$显示为$a\ b$ 4格空格:$a\quad b$显示为$a\quad b$ 分组 使用{}将同一级的括在一起，成组处理 $x_i^2$显示为$x_i^2$$x_{i^2}$显示为$x_{i^2}$ 括号 小括号:$(...)$显示为$(…)$ 中括号:$[...]$显示为$[…]$ 大括号:$\\{...\\}$显示为$\{…\}$ 尖括号：$\langle ... \rangle$显示为$\langle … \rangle$ 绝对值：$\vert ... \vert$显示为$\vert … \vert$ 双竖线：$\Vert ... \Vert$显示为$\Vert … \Vert$ 使用$\left$和$\right$使符号大小与邻近的公式相适应,该语句适用于所有括号类型 $\\{\frac{(x+y)}{[\alpha+\beta]}\\}$显示为$\{\frac{(x+y)}{[\alpha+\beta]}\}$$\left\\{\frac{(x+y)}{[\alpha+\beta]}\right\\}$显示为$\left\{\frac{(x+y)}{[\alpha+\beta]}\right\}$ 常用数学运算符基础符号 运算符 说明 应用举例 命令 + 加 $x+y$ $x+y$ - 减 $x−y$ $x-y$ \times 叉乘 $x\times y$ $x\timesy$ \cdot 点乘 $x\cdot y$ $x\cdot y$ \ast(*) 星乘 $x\ast(y)$ $x\ast(y)$ \div 除 $x\div y$ $x\div y$ \pm 加减 $x\pm y$ $x\pm y$ \mp 减加 $x\mp y$ $x\mp y$ \approx 约等于 $x\approx y$ $x\approx y$ \equiv 恒等于 $x\equiv y$ $x\equiv y$ \cong 全等于 $\triangle ABC\cong \triangle BCD$ $\triangle ABC\cong \triangle BCD$ \sim 相似于 $x\sim y$ $x\sim$ y \bigodot 定义运算符 $x\bigodot y$ $x\bigodot y$ \bigotimes 定义运算符 $x\bigotimes y$ $x\bigotimes y$ 比较运算符 运算符 说明 应用举例 命令 = 等于 $x=y$ $x=y$ \lt 小于 $x\lt y$ $x\lt y$ \gt 大于 $x\gt y$ $x\gt y$ \le 小于等于 $x\le y$ $x\le y$ \ge 大于等于 $x\ge y$ $x\ge y$ \ne 不等于 $x\ne y$ $x\ne y$ 逻辑运算符 运算符 说明 应用举例 命令 \land 与 $x\land y$ $x\land y$ \lor 或 $x\lor y$ $x\lor y$ \lnot 非 $\lnot x$ $\lnot x$ \oplus 异或 $x\oplus y=(\lnot x\land y)\lor(x\land \lnot y)$ $x\oplus y=(\lnot x\land y)\lor(x\land \lnot y)$ \forall 针对所有 $\forall x \in N$ $\forall x \in N$ \exists 存在 $\exists \xi$ $\exists \xi$ 集合符号 运算符 说明 应用举例 命令 \in 属于 $x\in y$ $x\in y$ \subseteq 子集 $x\subseteq y$ $x\subseteq y$ \subset 真子集 $x\subset y$ $x\subset y$ \supset 超集 $x\supset y$ $x\supset y$ \supseteq 超集 $x\supseteq y$ $x\supseteq y$ \varnothing 空集 $\varnothing$ $\varnothing$ \cup 并 $x\cup y$ $x\cup y$ \cap 交 $x\cap y$ $x\cap y$ 特殊符号 符号 命令 符号 命令 $\infty$ $\infty$ $\partial$ $\partial$ $\nabla$ $\nabla$ $\triangle$ $\triangle$ $\top$ $\top$ $\bot$ $\bot$ $\vdash$ $\vdash$ $\vDash$ $\vDash$ $\star$ $\star$ $\ast$ $\ast$ $\circ$ \circ $\bullet$ $\bullet$ 注:想要表达非的概念只需前加\not，会添加删除斜线，如:$x\not=y$显示为$x\not=y$，$x\not\in y$显示为$x\not\in y$ 其他 运算符 说明 应用举例 命令 \overbrace 上大括号 $\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$ $\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$ \underbrace 下大括号 $\underbrace{a+d}_3$ $\underbrace{a+d}_3$ \partial 偏导数 $\frac{\partial z}{\partial x}$ $\frac{\partial z}{\partial x}$ \ldots 底端对齐的省略号 $1,2,\ldots,n$ $1,2,\ldots,n$ \cdots 中线对齐的省略号 $1,2,\cdots,n$ $1,2,\cdots,n$ \uparrow 上箭头 $\uparrow$ $\uparrow$ \Uparrow 双上箭头 $\Uparrow$ $\Uparrow$ \downarrow 下箭头 $\downarrow$ $\downarrow$ \Downarrow 双下箭头 $\Downarrow$ $\Downarrow$ \leftarrow 左箭头 $\leftarrow$ $\leftarrow$ \Leftarrow 双左箭头 $\Leftarrow$ $\Leftarrow$ \rightarrow 右箭头 $\rightarrow$ $\rightarrow$ \Rightarrow 双右箭头 $\Rightarrow$ $\Rightarrow$ 求和、极限与积分求和、求积 求和符号$\sum$显示为$\sum$，注意要用\displaystyle显示成文内公式的模样,或者使用$$\sum$$（这时样式为居中） 举例:不加\displaystyle,$\sum_{i=0}^n$显示为$\sum_{i=0}^n$举例:加\displaystyle,$\displaystyle\sum_{i=0}^n$显示为$\displaystyle\sum_{i=0}^n$举例:$$\sum_{i=0}^n$$显示为$$\sum_{i=0}^n$$ 求积符号$\prod显示为$\prod$ 举例:$\displaystyle\prod_{i=0}^n$显示为$\displaystyle\prod_{i=0}^n$ 集合 大交集$\bigcap$显示为$\bigcap$ 举例:$\displaystyle\bigcap_{i=0}^n$显示为$\displaystyle\bigcap_{i=0}^n$ 大并集$\bigcup$显示为$\bigcup$ 举例:$\displaystyle\bigcup_{i=0}^n$显示为$\displaystyle\bigcup_{i=0}^n$ 极限 极限符号$\lim$显示为$\lim$ 举例: $\displaystyle\lim_{x\to\infty}$显示为$\displaystyle\lim_{x\to\infty}$ 积分 积分符号效果代码$\int$$\iint$$\iiint$$\oint$1234$\int$$\iint$$\iiint$$\oint$ 举例:$\int_0^\infty{fxdx}$显示为$\int_0^\infty{fxdx}$ 分式与根式分式 $\frac{公式1}{公式2}$显示为$\frac{公式1}{公式2}$ 举例:$\frac{b_i^2}{a_i^2}$显示为$\frac{b_i^2}{a_i^2}$ 连分式用$\cfrac{公式1}{公式2}$，样式与$\frac{公式1}{公式2}$略有不同 举例: 连分式$$x=a_0 + \cfrac {1^2}{a_1 + \cfrac {2^2}{a_2 + \cfrac {3^2}{a_3 + \cfrac {4^2}{a_4 + ...}}}}$$显示为$$x=a_0 + \cfrac {1^2}{a_1 + \cfrac {2^2}{a_2 + \cfrac {3^2}{a_3 + \cfrac {4^2}{a_4 + …}}}}$$举例: 连分式$$x=a_0 + \frac {1^2}{a_1 + \frac {2^2}{a_2 + \frac {3^2}{a_3 + \frac {4^2}{a_4 + ...}}}}$$显示为$$x=a_0 + \frac {1^2}{a_1 + \frac {2^2}{a_2 + \frac {3^2}{a_3 + \frac {4^2}{a_4 + …}}}}$$ 根式 $\sqrt[x]{y}$显示为$\sqrt[x]{y}$ 特殊函数 语法:$\函数名$ 举例: $\sin x$,$\ln x$,$\log_n^2$,$\max(A,B,C)$显示为$\sin x$,$\ln x$,$\log_n^2$,$\max(A,B,C)$ 矩阵基本语法 起始标记:$\begin{matrix},结束标记:\end{matrix}$ 每一行末尾标记\\\，行间元素之间以&amp;分隔效果代码$\begin{matrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{matrix}$12345$\begin&#123;matrix&#125;1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end&#123;matrix&#125;$ 矩阵边框 在起始、结束标记处用下列词替换matrixpmatrix小括号bmatrix中括号Bmatrix大括号vmatrix单竖线Vmatrix双竖线$\begin{pmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{pmatrix}$12345$\begin&#123;pmatrix&#125;1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end&#123;pmatrix&#125;$$\begin{bmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{bmatrix}$12345$\begin&#123;bmatrix&#125;1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end&#123;bmatrix&#125;$$\begin{Bmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{Bmatrix}$12345$\begin&#123;Bmatrix&#125;1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end&#123;Bmatrix&#125;$$\begin{vmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{vmatrix}$12345$\begin&#123;vmatrix&#125;1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end&#123;vmatrix&#125;$$\begin{Vmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{Vmatrix}$12345$\begin&#123;Vmatrix&#125;1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end&#123;Vmatrix&#125;$ 省略元素 横省略号：$\cdots$ 竖省略号：$\vdots$ 斜省略号：$\ddots$效果代码$\begin{bmatrix}{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\\{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\\{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\\{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\\\end{bmatrix}$123456$\begin&#123;bmatrix&#125;&#123;a_&#123;11&#125;&#125;&amp;&#123;a_&#123;12&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;1n&#125;&#125;\\&#123;a_&#123;21&#125;&#125;&amp;&#123;a_&#123;22&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;2n&#125;&#125;\\&#123;\vdots&#125;&amp;&#123;\vdots&#125;&amp;&#123;\ddots&#125;&amp;&#123;\vdots&#125;\\&#123;a_&#123;m1&#125;&#125;&amp;&#123;a_&#123;m2&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;mn&#125;&#125;\\\end&#123;bmatrix&#125;$ 阵列 需要array环境:起始、结束处以$\begin{array}、\end{array}$声明 对齐方式:在{array}后以{}逐行统一声明,左对齐:l；居中：c；右对齐：r 竖直线:在声明对齐方式时，插入|建立竖直线 插入水平线:\hline 换行: \\\，行间元素之间以&amp;分隔效果代码$\begin{array}{c|lll}{\downarrow}&amp;{a}&amp;{b}&amp;{c}\\\hline{R_1}&amp;{c}&amp;{b}&amp;{a}\\{R_2}&amp;{b}&amp;{c}&amp;{c}\\\end{array}$123456$\begin&#123;array&#125;&#123;c|lll&#125;&#123;\downarrow&#125;&amp;&#123;a&#125;&amp;&#123;b&#125;&amp;&#123;c&#125;\\\hline&#123;R_1&#125;&amp;&#123;c&#125;&amp;&#123;b&#125;&amp;&#123;a&#125;\\&#123;R_2&#125;&amp;&#123;b&#125;&amp;&#123;c&#125;&amp;&#123;c&#125;\\\end&#123;array&#125;$ 方程组 需要cases环境:起始、结束处以$\begin{cases}、\end{cases}$声明 换行：\\\,行间元素之间以&amp;分隔效果代码$\begin{cases}a_1x+b_1y+c_1z=d_1\\a_2x+b_2y+c_2z=d_2\\a_3x+b_3y+c_3z=d_3\\\end{cases}$123456$\begin&#123;cases&#125;a_1x+b_1y+c_1z=d_1\\a_2x+b_2y+c_2z=d_2\\a_3x+b_3y+c_3z=d_3\\\end&#123;cases&#125;$ 分段函数 与方程组定义方法类似效果代码$f(n)=\begin{cases}\cfrac n2, &amp;if\ n\ is\ even\\3n + 1, &amp;if\ n\ is\ odd\\\end{cases}$12345$f(n)=\begin&#123;cases&#125;\cfrac n2, &amp;if\ n\ is\ even\\3n + 1, &amp;if\ n\ is\ odd\\\end&#123;cases&#125;$ 多行表达式效果代码$\begin{equation}\begin{split}a&amp;=b+c-d \\&amp;\quad +e-f\\&amp;=g+h\\&amp;=i\\\end{split}\end{equation}$123456$\begin&#123;equation&#125;\begin&#123;split&#125; a&amp;=b+c-d \\ &amp;\quad +e-f\\ &amp;=g+h\\ &amp;=i\\\end&#123;split&#125;\end&#123;equation&#125;$ 插入图片语法说明：![图片Alt](图片地址 &quot;图片Title&quot;)效果代码1![哆啦A梦](/images/duola.jpg &quot;哆啦A梦&quot;)]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OSI网络参考模型]]></title>
    <url>%2F2019%2F02%2F14%2FOSI%E7%BD%91%E7%BB%9C%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[欢迎加入王导的VIP学习qq群：==&gt;932194668&lt;== OSI七层模型OSI模型（Open System Interconnection Model）是一个由ISO提出得到概念模型，试图提供一个使各种不同的的计算机和网络在世界范围内实现互联的标准框架。 分层结构OSI参考模型采用分层结构，如图所示。 不得不说，这张图真的超经典呀。一张图搞定你你不懂的一切。主要分为以下七层（从下至上）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。 各层功能 物理层简单的说，物理层（Physical Layer）确保原始的数据可在各种物理媒体上传输。在这一层上面规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性，为上层协议提供了一个传输数据的物理媒体。这一层传输的是bit流。 数据链路层数据链路层（Data Link Layer）在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。这一层中将bit流封装成frame帧。 网络层网络层（Network Layer）负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能。在这一层，数据的单位称为数据包（packet）。 传输层传输层是第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。在这一层，数据的单位称为数据段（segment）。 会话层这一层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步，访问验证和会话管理在内的建立和维护应用之间通信的机制。如服务器验证用户登录便是由会话层完成的。使通信会话在通信失效时从校验点继续恢复通信。 表示层这一层主要解决用户信息的语法表示问题。它将欲交换的数据从适合于某一用户的抽象语法，转换为适合于OSI系统内部使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩， 加密和解密等工作都由表示层负责。 应用层这一层为操作系统或网络应用程序提供访问网络服务的接口。 各层传输协议、传输单元、主要功能性设备比较 名称 传输协议 主要功能设备/接口 主要功能设备/接口 物理层 IEEE 802.1A、IEEE 802.2 bit-flow 比特流 光纤、双绞线、中继器和集线器 &amp; RJ-45(网线接口) 数据链路层 ARP、MAC、 FDDI、Ethernet、Arpanet、PPP、PDN frame 帧 网桥、二层交换机 网络层 IP、ICMP、ARP、RARP 数据包（packet） 路由器、三层交换机 传输层 TCP、UDP Segment/Datagram 四层交换机 会话层 SMTP、DNS 报文 QoS 表示层 Telnet、SNMP 报文 - 应用层 FTP、TFTP、Telnet、HTTP、DNS 报文 - 关于协议你应该知道这些以上通过图表、文字向大家阐述了七层模型每一层的具体功能及其相关协议，但知道了这些还不够，你还要知道以下这些。 TCP/UDP TCP/UDP是什么？TCP — Transmission Control Protocol，传输控制协议。UDP — User Data Protocol，用户数据报协议。 TCP/UDP的区别（优缺点）？(1)、TCP是面向连接的，UDP是面向无连接的。TCP在通信之前必须通过三次握手机制与对方建立连接，而UDP通信不必与对方建立连接，不管对方的状态就直接把数据发送给对方(2)、TCP连接过程耗时，UDP不耗时(3)、TCP连接过程中出现的延时增加了被攻击的可能，安全性不高，而UDP不需要连接，安全性较高(4)、TCP是可靠的，保证数据传输的正确性，不易丢包;UDP是不可靠的，易丢包(5)、tcp传输速率较慢，实时性差，udp传输速率较快。tcp建立连接需要耗时，并且tcp首部信息太多，每次传输的有用信息较少，实时性差。(6)、tcp是流模式，udp是数据包模式。tcp只要不超过缓冲区的大小就可以连续发送数据到缓冲区上，接收端只要缓冲区上有数据就可以读取，可以一次读取多个数据包，而udp一次只能读取一个数据包，数据包之间独立 TCP三次握手过程STEP 1： 主机A通过向主机B发送一个含有同步序列号的标志位的数据段给主机B，向主机B请求建立连接,通过这个数据段，主机A告诉主机B两件事:我想要和你通信；你可以用哪个序列号作为起始数据段来回应我。STEP 2： 主机B收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A，也告诉主机A两件事：我已经收到你的请求了，你可以传输数据了；你要用哪佧序列号作为起始数据段来回应我。STEP 3： 主机A收到这个数据段后，再发送一个确认应答，确认已收到主机B的数据段：”我已收到回复，我现在要开始传输实际数据了。这样3次握手就完成了，主机A和主机B就可以传输数据了。 注意此时需要注意的是，TCP建立连接要进行3次握手，而断开连接要进行4次。 名词解释ACK： TCP报头的控制位之一，对数据进行确认，确认由目的端发出，用它来告诉发送端这个序列号之前的数据段都收到了。比如，确认号为X，则表示前X-1个数据段都收到了，只有当ACK=1时，确认号才有效，当ACK=0时，确认号无效，这时会要求重传数据，保证数据的完整性。SYN： 同步序列号，TCP建立连接时将这个位置1。FIN ： 发送端完成发送任务位，当TCP完成数据传输需要断开时，提出断开连接的一方将这位置1。 TCP可靠性的四大手段(1)、顺序编号： tcp在传输文件的时候，会将文件拆分为多个tcp数据包，每个装满的数据包大小大约在1k左右，tcp协议为保证可靠传输，会将这些数据包顺序编号(2)、确认机制： 当数据包成功的被发送方发送给接收方，接收方会根据tcp协议反馈给发送方一个成功接收的ACK信号，信号中包含了当前包的序号(3)、超时重传： 当发送方发送数据包给接收方时，会为每一个数据包设置一个定时器，当在设定的时间内，发送方仍没有收到接收方的ACK信号，会再次发送该数据包，直到收到接收方的ACK信号或者连接已断开(4)、校验信息： tcp首部校验信息较多，udp首部校验信息较少。上文部分协议简单讲 IEEE 802.1A、IEEE 802.2IEEE是英文Institute of Electrical and Electronics Engineers的简称，其中文译名是电气和电子工程师协会。IEEE 802规范定义了网卡如何访问传输介质（如光缆、双绞线、无线等），以及如何在传输介质上传输数据的方法，还定义了传输信息的网络设备之间连接建立、维护和拆除的途径。遵循IEEE 802标准的产品包括网卡、桥接器、路由器以及其他一些用来建立局域网络的组件。IEEE802.1A —— 局域网体系结构IEEE802.2 ——- 逻辑链路控制(LLC) FDDI光纤分布式数据接口（Fiber Distributed Data Interface） PPP点对点协议（Point to Point Protocol），为在点对点连接上传输多协议数据包提供了一个标准方法。 IP互联网协议（Internet Protocol），为计算机网络相互连接进行通信而设计的协议。任何厂家生产的计算机系统，只要遵守IP协议就可以与因特网互连互通。IP地址具有唯一性，根据用户性质的不同，可以分为5类。 ICMP控制报文协议（Internet Control Message Protocol）。TCP/IP设计了ICMP协议，当某个网关发现传输错误时，立即向信源主机发送ICMP报文，报告出错信息，让信源主机采取相应处理措施，它是一种差错和控制报文协议，不仅用于传输差错报文，还传输控制报文。 ARP/RARPARP (Address Resolution Protocol) 地址解析协议RARP (Reverse Address Resolution Protocol) 反向地址解析协议 SMTP简单邮件传输协议（Simple Mail Transfer Protocol），它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP协议属于TCP/IP协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。通过SMTP协议所指定的服务器,就可以把E-mail寄到收信人的服务器上了。 SNMP简单网络管理协议（Simple Network Management Protocol ），该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况。 DNS域名系统（Domain Name System），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析(或主机名解析)。DNS协议运行在UDP协议之上，使用端口号53。 FTP文本传输协议（File Transfer Protocol），用于Internet上的控制文件的双向传输。同时，它也是一个应用程序Application）。基于不同的操作系统有不同的FTP应用程序，而所有这些应用程序都遵守该协议以传输文件。在FTP的使用当中，用户经常“下载”（Download）和“上载”（Upload）。“下载”文件就是从远程主机拷贝文件至自己的计算机上；“上载”文件就是将文件从自己的计算机中拷贝至远程主机上。 HTTP超文本传输协议（HyperText Transfer Protocol），是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型，是一个无状态的协议。]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[实验文档1：BIND9的安装部署]]></title>
    <url>%2F2018%2F02%2F15%2F%E5%AE%9E%E9%AA%8C%E6%96%87%E6%A1%A31%EF%BC%9ABIND9%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[欢迎加入王导的VIP学习qq群：==&gt;932194668&lt;== 安装部署BIND9操作系统版本和内核版本12345#cat /etc/redhat-release CentOS Linux release 7.5.1804 (Core) #uname -aLinux node 3.10.0-862.el7.x86_64 #1 SMP Fri Apr 20 16:44:24 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux 使用yum安装BIND9123456#yum install bind============================================================================================================================================================= Package Arch Version Repository Size=============================================================================================================================================================Installing: bind x86_64 32:9.9.4-73.el7_6 updates 1.8 M 安装的版本为9.9.4 BIND9主配置文件/etc/named.conf 主配置文件的格式 12345678910options&#123; //全局选项&#125;zone &quot;zone name&quot; &#123; //定于区域&#125;logging&#123; //日志文件&#125;include：加载别的文件 主配置文件的配置注意事项 语法严格，分号，空格 文件的权限，属主：root，属组：named，640 主配置文件范例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647options &#123; listen-on port 53 &#123; 10.4.7.11; &#125;; directory &quot;/var/named&quot;; dump-file &quot;/var/named/data/cache_dump.db&quot;; statistics-file &quot;/var/named/data/named_stats.txt&quot;; memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;; allow-query &#123; any; &#125;; /* - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion. - If you are building a RECURSIVE (caching) DNS server, you need to enable recursion. - If your recursive DNS server has a public IP address, you MUST enable access control to limit queries to your legitimate users. Failing to do so will cause your server to become part of large scale DNS amplification attacks. Implementing BCP38 within your network would greatly reduce such attack surface */ recursion yes; dnssec-enable no; dnssec-validation no; /* Path to ISC DLV key */ bindkeys-file &quot;/etc/named.iscdlv.key&quot;; managed-keys-directory &quot;/var/named/dynamic&quot;; pid-file &quot;/run/named/named.pid&quot;; session-keyfile &quot;/run/named/session.key&quot;;&#125;;logging &#123; channel default_debug &#123; file &quot;data/named.run&quot;; severity dynamic; &#125;;&#125;;zone &quot;.&quot; IN &#123; type hint; file &quot;named.ca&quot;;&#125;;include &quot;/etc/named.rfc1912.zones&quot;;include &quot;/etc/named.root.key&quot;;]]></content>
      <categories>
        <category>Web DNS技术</category>
      </categories>
  </entry>
</search>
